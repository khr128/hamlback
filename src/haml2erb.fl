/*%option   8bit reentrant bison-bridge*/
%option   warn nodefault
%option   yylineno
%option   outfile="haml2erb.scanner.c" header-file="haml2erb.scanner.h"
%{
#include <stdio.h>
#include "haml2erb.tab.h"
%}

NUM                 [0-9]
VAR                 [a-zA-Z]
VARNUM              [_0-9a-zA-Z]
CONTENT             [ _0-9a-zA-Z.<>="!/]
SPACE               [ ]
TAB                 \t
WS                  [ \t]
NOT_WS              [^ \t]
PCT                 %
POUND               #
OPEN_BRACE          \{
CLOSE_BRACE         \}
COLON               \:
ARROW               =>
EQUAL               =
DASH                -
SLASH               \/
QUOTE               [\'\"]
NOT_QUOTE           [^\'\"]
LINE_CONTINUATION   \|\n

%%
^{SPACE}*{SLASH}.*                                { yylval.strval = strdup(yytext); return HTML_COMMENT;}
^{SPACE}*{DASH}{POUND}.*                          { return HAML_COMMENT;}
^{SPACE}+{EQUAL}.*                                { yylval.strval = strdup(yytext); return RUBY_CODE;}
^{SPACE}+{DASH}.*                                 { yylval.strval = strdup(yytext); return RUBY_CODE_NO_INSERT;}
{LINE_CONTINUATION}                               { return LINE_CONTINUATION; }
^{SPACE}+{EQUAL}.*/{LINE_CONTINUATION}            { yylval.strval = strdup(yytext); return RUBY_CODE;}
^{SPACE}+{DASH}.*/{LINE_CONTINUATION}             { yylval.strval = strdup(yytext); return RUBY_CODE_NO_INSERT;}
.*/{LINE_CONTINUATION}                            { yylval.strval = strdup(yytext); return CONTENT;}
^{SPACE}+                                         { yylval.strval = strdup(yytext); return SPACE_INDENT; }
{EQUAL}                                           { return EQUAL; }
{PCT}                                             { return PCT; }
{POUND}                                           { return POUND; }
{OPEN_BRACE}                                      { return OPEN_BRACE; }
{COLON}{VARNUM}+                                  { yylval.strval = strdup(yytext); return SYMBOL; }
{ARROW}                                           { return ARROW; }
{CLOSE_BRACE}                                     { return CLOSE_BRACE; }
\n                                                { return EOL; }
{VAR}+{VARNUM}*                                   { yylval.strval = strdup(yytext); return VAR; }
{WS}+{CONTENT}+                                   { yylval.strval = strdup(yytext); return CONTENT; }
{QUOTE}{NOT_QUOTE}*{QUOTE}                        { yylval.strval = strdup(yytext); return STRING; }
{PCT}+{NUM}+{VAR}+{VARNUM}*                       { fprintf (stderr, "Invalid tag name match: %s\n", yytext); return INVALID; }
.                                                 { yylval.strval = strdup(yytext); return CONTENT;} 
<<EOF>>                                           { fprintf (stderr, "End of parse.\n" ); yyterminate(); }
%%

yyerror( char *str )
{
  fprintf(stderr, "error:-( %s at line %d about '%s'\n", str, yylineno, yytext); 
}

